{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPhcCku+ev5F+ltwezzqdir",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hellen44/aulapablo/blob/main/Untitled7.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def listaA(palavras):\n",
        "  wordA = []\n",
        "  for i in palavras:\n",
        "     if i[0] == 'a':\n",
        "      wordA.append(i)\n",
        "  print(len(wordA))\n",
        "  return wordA"
      ],
      "metadata": {
        "id": "VTSWOj68VDlx"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "animais = ['amarelada ', 'amanha', 'burro', 'macaco', 'aguaceiro']\n",
        "listaA(animais)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4plagXkMWw1q",
        "outputId": "61903636-33e8-4f67-f8e5-2f2ed188da51"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['amarelada ', 'amanha', 'aguaceiro']"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def produto(numeros):\n",
        "  resultado = 1\n",
        "  for n in numeros:\n",
        "    resultado *= n\n",
        "  return resultado\n",
        "\n",
        "numbers = [4,3,4,5,4,]\n",
        "produto(numbers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aZnZEp1ParQb",
        "outputId": "85e50672-fb63-4283-a18b-843787100353"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "960"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def soma_pares(numeros2):\n",
        "   soma = 0\n",
        "   for num in numeros2:\n",
        "     if (num%2 == 0):\n",
        "         soma += num\n",
        "   return soma\n"
      ],
      "metadata": {
        "id": "LRE9qjKXj1w5"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numbers = [4, 6, 8, 44]\n",
        "soma_pares(numbers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N2CXRE84knD4",
        "outputId": "eee9a969-72b2-4212-8a50-d89e9010afdf"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "62"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "users = ['hellenn', 'me', 'I','eu','myself']\n",
        "\n",
        "def maiorString(users):\n",
        "   maior = ''\n",
        "   for u in users:\n",
        "    if(len(u) >= len(maior)):  \n",
        "       maior = u\n",
        "   print(maior)\n",
        "\n",
        "maiorString(users)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "je7PPFwgkzgB",
        "outputId": "11a0f916-da9d-46cb-f5ae-17f615bbdd72"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hellenn\n"
          ]
        }
      ]
    }
  ]
}
